name: CI - Test, Lint, and Type Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22.12.0'
  PNPM_VERSION: '9.15.4'

jobs:
  # Job 1: Run unit and integration tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: |
          cd agentset
          pnpm --filter @agentset/cloudflare-tools test || echo "No tests found for cloudflare-tools"
          pnpm --filter @agentset/engine test || echo "No tests found for engine"
          pnpm --filter @agentset/web test || echo "No tests found for web"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            **/test-results/
            **/coverage/
          retention-days: 7

  # Job 2: Type checking
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma types
        run: |
          cd agentset
          pnpm db:generate

      - name: Run type check
        run: |
          cd agentset
          pnpm typecheck

  # Job 3: Linting
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: |
          cd agentset
          pnpm lint

      - name: Run Prettier
        run: |
          cd agentset
          pnpm format

  # Job 4: Security tests (runs existing security test suite)
  security:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security tests
        run: |
          cd agentset
          pnpm --filter @agentset/web test cloudflare.security.test.ts || echo "Security tests not yet configured"

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            **/test-results/security/
          retention-days: 7

  # Job 5: Build check
  build:
    name: Build Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma types
        run: |
          cd agentset
          pnpm db:generate

      - name: Build packages
        run: |
          cd agentset
          pnpm --filter @agentset/cloudflare-tools build || echo "Build not configured for cloudflare-tools"

  # Job 6: Quality gate (requires all jobs to pass)
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, typecheck, lint, security, build]
    if: always()

    steps:
      - name: Check job results
        run: |
          if [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.typecheck.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ Quality gate failed - one or more jobs did not pass"
            exit 1
          fi
          echo "✅ Quality gate passed - all checks successful"

      - name: Post status to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ needs.test.result }}' === 'success' &&
                          '${{ needs.typecheck.result }}' === 'success' &&
                          '${{ needs.lint.result }}' === 'success' &&
                          '${{ needs.build.result }}' === 'success'
                          ? '✅ All quality checks passed'
                          : '❌ Some quality checks failed';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Quality Gate Results\n\n${status}\n\n- **Tests**: ${{ needs.test.result }}\n- **Type Check**: ${{ needs.typecheck.result }}\n- **Lint**: ${{ needs.lint.result }}\n- **Security**: ${{ needs.security.result }}\n- **Build**: ${{ needs.build.result }}`
            });
